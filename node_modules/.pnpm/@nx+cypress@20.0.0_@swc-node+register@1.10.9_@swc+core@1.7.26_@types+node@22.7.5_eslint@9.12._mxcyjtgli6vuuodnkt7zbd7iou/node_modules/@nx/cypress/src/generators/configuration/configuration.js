"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.configurationGenerator = configurationGenerator;
exports.configurationGeneratorInternal = configurationGeneratorInternal;
const devkit_1 = require("@nx/devkit");
const eslint_1 = require("@nx/eslint");
const js_1 = require("@nx/js");
const ts_solution_setup_1 = require("@nx/js/src/utils/typescript/ts-solution-setup");
const path_1 = require("path");
const add_linter_1 = require("../../utils/add-linter");
const config_1 = require("../../utils/config");
const cypress_version_1 = require("../../utils/cypress-version");
const versions_1 = require("../../utils/versions");
const base_setup_1 = require("../base-setup/base-setup");
const init_1 = require("../init/init");
function configurationGenerator(tree, options) {
    return configurationGeneratorInternal(tree, {
        addPlugin: false,
        ...options,
    });
}
async function configurationGeneratorInternal(tree, options) {
    (0, ts_solution_setup_1.assertNotUsingTsSolutionSetup)(tree, 'cypress', 'configuration');
    const opts = normalizeOptions(tree, options);
    opts.addPlugin ??= process.env.NX_ADD_PLUGINS !== 'false';
    const tasks = [];
    const projectGraph = await (0, devkit_1.createProjectGraphAsync)();
    if (!(0, cypress_version_1.installedCypressVersion)()) {
        tasks.push(await (0, js_1.initGenerator)(tree, { ...options, skipFormat: true }));
        tasks.push(await (0, init_1.default)(tree, {
            ...opts,
            skipFormat: true,
        }));
    }
    else if (opts.addPlugin) {
        await (0, init_1.addPlugin)(tree, projectGraph, false);
    }
    const nxJson = (0, devkit_1.readNxJson)(tree);
    const hasPlugin = nxJson.plugins?.some((p) => typeof p === 'string'
        ? p === '@nx/cypress/plugin'
        : p.plugin === '@nx/cypress/plugin');
    await addFiles(tree, opts, projectGraph, hasPlugin);
    if (!hasPlugin) {
        addTarget(tree, opts, projectGraph);
    }
    const linterTask = await (0, add_linter_1.addLinterToCyProject)(tree, {
        ...opts,
        cypressDir: opts.directory,
    });
    tasks.push(linterTask);
    if (!opts.skipPackageJson) {
        tasks.push(ensureDependencies(tree, opts));
    }
    if (!opts.skipFormat) {
        await (0, devkit_1.formatFiles)(tree);
    }
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
function ensureDependencies(tree, options) {
    const devDependencies = {
        '@types/node': versions_1.typesNodeVersion,
    };
    if (options.bundler === 'vite') {
        devDependencies['vite'] = versions_1.viteVersion;
    }
    return (0, devkit_1.addDependenciesToPackageJson)(tree, {}, devDependencies);
}
function normalizeOptions(tree, options) {
    const projectConfig = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    if (projectConfig?.targets?.e2e) {
        throw new Error(`Project ${options.project} already has an e2e target.
Rename or remove the existing e2e target.`);
    }
    if (!options.baseUrl &&
        !options.devServerTarget &&
        !projectConfig?.targets?.serve) {
        throw new Error(`The project ${options.project} does not have a 'serve' target.
In this case you need to provide a devServerTarget,'<projectName>:<targetName>[:<configName>]', or a baseUrl option`);
    }
    options.directory ??= 'src';
    const devServerTarget = options.devServerTarget ??
        (projectConfig?.targets?.serve ? `${options.project}:serve` : undefined);
    if (!options.baseUrl && !devServerTarget) {
        throw new Error('Either baseUrl or devServerTarget must be provided');
    }
    const nxJson = (0, devkit_1.readNxJson)(tree);
    options.addPlugin ??=
        process.env.NX_ADD_PLUGINS !== 'false' &&
            nxJson.useInferencePlugins !== false;
    return {
        ...options,
        bundler: options.bundler ?? 'webpack',
        rootProject: options.rootProject ?? projectConfig.root === '.',
        linter: options.linter ?? eslint_1.Linter.EsLint,
        devServerTarget,
    };
}
async function addFiles(tree, options, projectGraph, hasPlugin) {
    const projectConfig = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    const cyVersion = (0, cypress_version_1.installedCypressVersion)();
    const filesToUse = cyVersion && cyVersion < 10 ? 'v9' : 'v10';
    const hasTsConfig = tree.exists((0, devkit_1.joinPathFragments)(projectConfig.root, 'tsconfig.json'));
    const offsetFromProjectRoot = options.directory
        .split('/')
        .map((_) => '..')
        .join('/');
    const fileOpts = {
        ...options,
        dir: options.directory ?? 'src',
        ext: options.js ? 'js' : 'ts',
        offsetFromRoot: (0, devkit_1.offsetFromRoot)(projectConfig.root),
        offsetFromProjectRoot,
        projectRoot: projectConfig.root,
        tsConfigPath: hasTsConfig
            ? `${offsetFromProjectRoot}/tsconfig.json`
            : (0, js_1.getRelativePathToRootTsConfig)(tree, projectConfig.root),
        tmpl: '',
    };
    (0, devkit_1.generateFiles)(tree, (0, path_1.join)(__dirname, 'files', filesToUse), projectConfig.root, fileOpts);
    if (filesToUse === 'v10') {
        (0, base_setup_1.addBaseCypressSetup)(tree, {
            project: options.project,
            directory: options.directory,
            jsx: options.jsx,
            js: options.js,
        });
        const cyFile = (0, devkit_1.joinPathFragments)(projectConfig.root, options.js ? 'cypress.config.js' : 'cypress.config.ts');
        let webServerCommands;
        let ciWebServerCommand;
        let ciBaseUrl;
        if (hasPlugin && options.webServerCommands && options.ciWebServerCommand) {
            webServerCommands = options.webServerCommands;
            ciWebServerCommand = options.ciWebServerCommand;
            ciBaseUrl = options.ciBaseUrl;
        }
        else if (hasPlugin && options.devServerTarget) {
            webServerCommands = {};
            webServerCommands.default = 'nx run ' + options.devServerTarget;
            const parsedTarget = (0, devkit_1.parseTargetString)(options.devServerTarget, projectGraph);
            const devServerProjectConfig = (0, devkit_1.readProjectConfiguration)(tree, parsedTarget.project);
            // Add production e2e target if serve target is found
            if (parsedTarget.configuration !== 'production' &&
                devServerProjectConfig?.targets?.[parsedTarget.target]
                    ?.configurations?.['production']) {
                webServerCommands.production = `nx run ${parsedTarget.project}:${parsedTarget.target}:production`;
            }
            // Add ci/static e2e target if serve target is found
            if (devServerProjectConfig?.targets?.['serve-static']) {
                ciWebServerCommand = `nx run ${parsedTarget.project}:serve-static`;
            }
        }
        const updatedCyConfig = await (0, config_1.addDefaultE2EConfig)(tree.read(cyFile, 'utf-8'), {
            cypressDir: options.directory,
            bundler: options.bundler === 'vite' ? 'vite' : undefined,
            webServerCommands,
            ciWebServerCommand: ciWebServerCommand,
            ciBaseUrl,
        }, options.baseUrl);
        tree.write(cyFile, updatedCyConfig);
    }
    if (cyVersion &&
        cyVersion < 7 &&
        tree.exists((0, devkit_1.joinPathFragments)(projectConfig.root, 'src', 'plugins', 'index.js'))) {
        (0, devkit_1.updateJson)(tree, (0, path_1.join)(projectConfig.root, 'cypress.json'), (json) => {
            json.pluginsFile = './src/plugins/index';
            return json;
        });
    }
    else if (cyVersion < 10) {
        const pluginPath = (0, path_1.join)(projectConfig.root, 'src/plugins/index.js');
        if (tree.exists(pluginPath)) {
            tree.delete(pluginPath);
        }
    }
    if (options.js) {
        (0, devkit_1.toJS)(tree);
    }
}
function addTarget(tree, opts, projectGraph) {
    const projectConfig = (0, devkit_1.readProjectConfiguration)(tree, opts.project);
    const cyVersion = (0, cypress_version_1.installedCypressVersion)();
    projectConfig.targets ??= {};
    projectConfig.targets.e2e = {
        executor: '@nx/cypress:cypress',
        options: {
            cypressConfig: (0, devkit_1.joinPathFragments)(projectConfig.root, cyVersion && cyVersion < 10
                ? 'cypress.json'
                : `cypress.config.${opts.js ? 'js' : 'ts'}`),
            testingType: 'e2e',
        },
    };
    if (opts.devServerTarget) {
        const parsedTarget = (0, devkit_1.parseTargetString)(opts.devServerTarget, projectGraph);
        projectConfig.targets.e2e.options = {
            ...projectConfig.targets.e2e.options,
            devServerTarget: opts.devServerTarget,
            port: opts.port,
        };
        const devServerProjectConfig = (0, devkit_1.readProjectConfiguration)(tree, parsedTarget.project);
        // Add production e2e target if serve target is found
        if (parsedTarget.configuration !== 'production' &&
            devServerProjectConfig.targets?.[parsedTarget.target]?.configurations?.['production']) {
            projectConfig.targets.e2e.configurations ??= {};
            projectConfig.targets.e2e.configurations['production'] = {
                devServerTarget: `${parsedTarget.project}:${parsedTarget.target}:production`,
            };
        }
        // Add ci/static e2e target if serve target is found
        if (devServerProjectConfig.targets?.['serve-static']) {
            projectConfig.targets.e2e.configurations ??= {};
            projectConfig.targets.e2e.configurations.ci = {
                devServerTarget: `${parsedTarget.project}:serve-static`,
            };
        }
    }
    else if (opts.baseUrl) {
        projectConfig.targets.e2e.options = {
            ...projectConfig.targets.e2e.options,
            baseUrl: opts.baseUrl,
        };
    }
    (0, devkit_1.updateProjectConfiguration)(tree, opts.project, projectConfig);
}
exports.default = configurationGenerator;
