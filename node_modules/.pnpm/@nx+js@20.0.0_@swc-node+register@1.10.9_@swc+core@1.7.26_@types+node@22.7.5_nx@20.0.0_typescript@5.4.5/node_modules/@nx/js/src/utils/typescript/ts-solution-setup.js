"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isUsingTypeScriptPlugin = isUsingTypeScriptPlugin;
exports.isUsingTsSolutionSetup = isUsingTsSolutionSetup;
exports.assertNotUsingTsSolutionSetup = assertNotUsingTsSolutionSetup;
const devkit_1 = require("@nx/devkit");
const package_manager_workspaces_1 = require("../package-manager-workspaces");
function isUsingTypeScriptPlugin(tree) {
    const nxJson = (0, devkit_1.readNxJson)(tree);
    return (nxJson?.plugins?.some((p) => typeof p === 'string'
        ? p === '@nx/js/typescript'
        : p.plugin === '@nx/js/typescript') ?? false);
}
function isUsingTsSolutionSetup(tree) {
    return ((0, package_manager_workspaces_1.isUsingPackageManagerWorkspaces)(tree) &&
        isWorkspaceSetupWithTsSolution(tree));
}
function isWorkspaceSetupWithTsSolution(tree) {
    if (!tree.exists('tsconfig.base.json') || !tree.exists('tsconfig.json')) {
        return false;
    }
    const tsconfigJson = (0, devkit_1.readJson)(tree, 'tsconfig.json');
    if (tsconfigJson.extends !== './tsconfig.base.json') {
        return false;
    }
    /**
     * New setup:
     * - `files` is defined and set to an empty array
     * - `references` is defined and set to an empty array
     * - `include` is not defined or is set to an empty array
     */
    if (!tsconfigJson.files ||
        tsconfigJson.files.length > 0 ||
        !tsconfigJson.references ||
        !!tsconfigJson.include?.length) {
        return false;
    }
    const baseTsconfigJson = (0, devkit_1.readJson)(tree, 'tsconfig.base.json');
    if (!baseTsconfigJson.compilerOptions ||
        !baseTsconfigJson.compilerOptions.composite ||
        !baseTsconfigJson.compilerOptions.declaration) {
        return false;
    }
    const { compilerOptions, ...rest } = baseTsconfigJson;
    if (Object.keys(rest).length > 0) {
        return false;
    }
    return true;
}
function assertNotUsingTsSolutionSetup(tree, pluginName, generatorName) {
    if (process.env.NX_IGNORE_UNSUPPORTED_TS_SETUP === 'true' ||
        !isUsingTsSolutionSetup(tree)) {
        return;
    }
    const artifactString = generatorName === 'init'
        ? `"@nx/${pluginName}" plugin`
        : `"@nx/${pluginName}:${generatorName}" generator`;
    devkit_1.output.error({
        title: `The ${artifactString} doesn't yet support the existing TypeScript setup`,
        bodyLines: [
            `We're working hard to support the existing TypeScript setup with the ${artifactString}. We'll soon release a new version of Nx with support for it.`,
        ],
    });
    process.exit(1);
}
