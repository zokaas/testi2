"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeSchema = normalizeSchema;
const get_import_path_1 = require("../../../utilities/get-import-path");
const utils_1 = require("./utils");
async function normalizeSchema(tree, schema, projectConfiguration) {
    const { destination, newProjectName, importPath } = await determineProjectNameAndRootOptions(tree, schema, projectConfiguration);
    return {
        ...schema,
        destination: (0, utils_1.normalizePathSlashes)(schema.destination),
        importPath,
        newProjectName,
        relativeToRootDestination: destination,
    };
}
async function determineProjectNameAndRootOptions(tree, options, projectConfiguration) {
    validateName(options.newProjectName, projectConfiguration);
    const projectNameAndRootOptions = getProjectNameAndRootOptions(tree, options, projectConfiguration);
    return projectNameAndRootOptions;
}
function validateName(name, projectConfiguration) {
    if (!name) {
        return;
    }
    /**
     * Matches two types of project names:
     *
     * 1. Valid npm package names (e.g., '@scope/name' or 'name').
     * 2. Names starting with a letter and can contain any character except whitespace and ':'.
     *
     * The second case is to support the legacy behavior (^[a-zA-Z].*$) with the difference
     * that it doesn't allow the ":" character. It was wrong to allow it because it would
     * conflict with the notation for tasks.
     */
    const libraryPattern = '(?:^@[a-zA-Z0-9-*~][a-zA-Z0-9-*._~]*\\/[a-zA-Z0-9-~][a-zA-Z0-9-._~]*|^[a-zA-Z][^:]*)$';
    const appPattern = '^[a-zA-Z][^:]*$';
    if (projectConfiguration.projectType === 'application') {
        const validationRegex = new RegExp(appPattern);
        if (!validationRegex.test(name)) {
            throw new Error(`The new project name should match the pattern "${appPattern}". The provided value "${name}" does not match.`);
        }
    }
    else if (projectConfiguration.projectType === 'library') {
        const validationRegex = new RegExp(libraryPattern);
        if (!validationRegex.test(name)) {
            throw new Error(`The new project name should match the pattern "${libraryPattern}". The provided value "${name}" does not match.`);
        }
    }
}
function getProjectNameAndRootOptions(tree, options, projectConfiguration) {
    let destination = (0, utils_1.normalizePathSlashes)(options.destination);
    if (options.newProjectName &&
        options.newProjectName.includes('/') &&
        !options.newProjectName.startsWith('@')) {
        throw new Error(`You can't specify a new project name with a directory path (${options.newProjectName}). ` +
            `Please provide a valid name without path segments and the full destination with the "--destination" option.`);
    }
    const asProvidedOptions = getAsProvidedOptions(tree, { ...options, destination }, projectConfiguration);
    return asProvidedOptions;
}
function getAsProvidedOptions(tree, options, projectConfiguration) {
    const newProjectName = options.newProjectName ?? options.projectName;
    const destination = options.destination;
    if (projectConfiguration.projectType !== 'library') {
        return { destination, newProjectName };
    }
    let importPath = options.importPath;
    if (importPath) {
        return { destination, newProjectName, importPath };
    }
    if (options.newProjectName?.startsWith('@')) {
        // keep the existing import path if the name didn't change
        importPath =
            options.newProjectName && options.projectName !== options.newProjectName
                ? newProjectName
                : undefined;
    }
    else if (options.newProjectName) {
        const npmScope = (0, get_import_path_1.getNpmScope)(tree);
        importPath = npmScope
            ? `${npmScope === '@' ? '' : '@'}${npmScope}/${newProjectName}`
            : newProjectName;
    }
    return { destination, newProjectName, importPath };
}
