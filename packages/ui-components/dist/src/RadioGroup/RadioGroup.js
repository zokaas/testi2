"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const RadioGroup = ({ label, name, options, selectedValue, onChange, errorMessage, }) => {
    return ((0, jsx_runtime_1.jsxs)("div", { className: "flex-grow mb-6", children: [(0, jsx_runtime_1.jsx)("label", { className: "block mb-2 font-medium text-base-content", children: label }), (0, jsx_runtime_1.jsx)("div", { className: "flex space-x-4", children: options.map((option) => ((0, jsx_runtime_1.jsxs)("label", { className: "flex items-center space-x-2", children: [(0, jsx_runtime_1.jsx)("input", { type: "radio", name: name, value: option.value, checked: selectedValue === option.value, onChange: () => onChange(option.value), className: "sr-only peer" }), (0, jsx_runtime_1.jsx)("div", { className: "w-5 h-5 rounded-full border-2 border-base-300 bg-base-100 flex items-center justify-center peer-checked:border-primary peer-checked:bg-primary transition-all duration-200 peer-focus-visible:ring-2 peer-focus-visible:ring-primary peer-focus-visible:ring-offset-2", children: (0, jsx_runtime_1.jsx)("div", { className: "w-2 h-2 rounded-full bg-base-100 opacity-0 peer-checked:opacity-100 transition-opacity duration-200" }) }), (0, jsx_runtime_1.jsx)("span", { className: "text-base font-medium text-base-content/70 peer-checked:text-base-content transition-colors duration-200", children: option.value })] }, option.value))) }), errorMessage && (0, jsx_runtime_1.jsx)("span", { className: "text-red-500 text-sm block", children: errorMessage })] }));
};
exports.default = RadioGroup;
